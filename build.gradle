plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
}

group = 'org.neimeyer'
version = '1.0.0'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.5-R0.1-SNAPSHOT")
}

tasks {
    runServer {
        minecraftVersion("1.21")
    }
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('paper-plugin.yml') {
        expand props
    }
}

tasks.register('projectInfo') {
    doLast {
        println "Project Details:"
        println "================"
        println "Name:    ${rootProject.name}"
        println "Group:   ${group}"
        println "Version: ${version}"
        println "Java:    ${JavaVersion.current()}\n"
        println ""
        println "Jar Output:"
        println "------------"
        println "Filename: ${rootProject.name}-${version}.jar"
        println "Full Path: ${jar.archiveFile.get().asFile.absolutePath}"
    }
}

tasks.register('cleanAndJar') {
    group = 'build'
    description = 'Cleans, builds jar, then cleans again for next development cycle'
    dependsOn clean, jar
    finalizedBy projectInfo
    
    doLast {
        // Clean again after jar is built to prepare for next development cycle
        println "Cleaning build directory for next development cycle..."
        delete fileTree('build') {
            exclude 'libs/**'  // Keep the jar files
        }
        println "Build directory cleaned (jar files preserved)"
    }
}